name: 在原生 Arm Runner 上比较 Pi 计算的 NEON 与 SVE 性能

on:
  push: # 在代码推送到任何分支时触发
  workflow_dispatch: # 允许从 Actions 选项卡手动触发

jobs:
  compare_pi_perf:
    # 使用特定版本的原生 Arm64 Runner (Ubuntu 24.04) 以保证环境一致性
    # 这是基于 Azure Cobalt 100 / Arm Neoverse N2 核心的
    name: 在原生 Arm64 (ubuntu-24.04) 上运行 Pi 性能比较 # Job 的显示名称
    runs-on: ubuntu-24.04-arm

    steps:
    - name: 签出代码 (Checkout Code) # Step 的名称，用于 UI 显示
      # 获取你仓库中的代码
      uses: actions/checkout@v4
      # 移除 displayName: 签出代码 (Checkout Code)

    - name: 安装 Clang 和构建工具 # Step 的名称
      # 安装 clang (推荐，对 Arm 支持良好) 和 build-essential (提供 make, gcc 等工具)
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y clang build-essential
      # 移除 displayName: 安装 Clang 和构建工具

    - name: 检查 Clang 编译器版本 # Step 的名称
      # 打印编译器版本信息，方便调试和记录
      run: clang --version
      # 移除 displayName

    - name: 检测 SVE 向量宽度 # Step 的名称
      # 编译并运行一个小程序来检测运行时的 SVE 向量宽度。
      run: |
        cat <<EOF > width_check.c
        #include <stdio.h>
        #include <arm_sve.h>
        #include <stdint.h>

        int main() {
            uint64_t bytes = svcntb();
            if (bytes == 0) {
                printf("SVE 不支持或未启用 (svcntb() 返回 0)。\n");
                return 1;
            }
            printf("检测到的 SVE 宽度: %llu bits\n", (unsigned long long)bytes * 8);
            return 0;
        }
        EOF
        clang width_check.c -o width_check -march=armv9-a
        echo "--- 开始运行 SVE 宽度检查 ---"
        ./width_check
        echo "--- SVE 宽度检查结束 ---"
      # 移除 displayName

    - name: 编译 Pi 比较程序 (pi_compare_combined_fixed_v4.c) # Step 的名称
      # !!! 重要: 请确保下面的 'pi_compare_combined_fixed_v4.c' 与你仓库中的实际 C 文件名完全一致！!!!
      run: |
        clang pi_compare_combined_fixed_v4.c -o pi_compare_combined \
          -O3 -march=armv9-a -lm -Wall -Wextra
      # 移除 displayName

    - name: 执行基准测试 (N=5亿) # Step 的名称
      # 设置一个合理的 N 值 (例如 5 亿次迭代)
      run: |
        echo "--- 开始运行 Pi 性能比较 (N=500,000,000) ---"
        ./pi_compare_combined 500000000
        echo "--- Pi 性能比较结束 ---"
      # 移除 displayName

    - name: 打包并上传可执行文件 # Step 的名称
      # 将编译生成的可执行文件打包上传
      uses: actions/upload-artifact@v4
      with:
        name: compiled-binaries-arm64 # Artifact 的名称
        path: | # 要上传的文件路径
          pi_compare_combined
          width_check
        if-no-files-found: warn # 如果找不到文件，发出警告
      # 移除 displayName